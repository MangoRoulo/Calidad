Comandos

pip install selenium

Web Driver
https://storage.googleapis.com/chrome-for-testing-public/127.0.6533.72/win64/chromedriver-win64.zip

GekoDriver
https://github.com/mozilla/geckodriver/releases

Localizadores

elemento_por_id = driver.find_element(By.ID, 'elementoID')
elemento_por_nombre = driver.find_element(By.NAME, 'elementoNombre')
elemento_por_clase = driver.find_element(By.CLASS_NAME, 'elementoClase')
elemento_por_etiqueta = driver.find_element(By.TAG_NAME, 'div')
elemento_por_css = driver.find_element(By.CSS_SELECTOR, '.elementoClase')
elemento_por_xpath = driver.find_element(By.XPATH, '//div[@id="elementoID"]')
elemento_por_texto_enlace = driver.find_element(By.LINK_TEXT, 'Texto del Enlace')
elemento_por_texto_parcial_enlace = driver.find_element(By.PARTIAL_LINK_TEXT, 'Texto Parcial')

# Realizar acciones en los elementos
elemento_por_id.click()
elemento_por_nombre.send_keys('Texto de ejemplo')


from selenium import webdriver
from selenium.webdriver.common.by import By

# Inicializar el WebDriver (asegúrate de tener el controlador adecuado descargado y configurado)
driver = webdriver.Chrome(executable_path='ruta/al/chromedriver')

# Abrir una página web
driver.get('https://ejemplo.com')

# Localizar elementos usando diferentes identificadores

# 1. Localizar por ID
elemento_por_id = driver.find_element(By.ID, 'elementoID')
elemento_por_id.click()  # Ejemplo de acción

# 2. Localizar por Nombre
elemento_por_nombre = driver.find_element(By.NAME, 'elementoNombre')
elemento_por_nombre.send_keys('Texto de ejemplo')  # Ejemplo de acción

# 3. Localizar por Clase
elemento_por_clase = driver.find_element(By.CLASS_NAME, 'elementoClase')
elemento_por_clase.click()  # Ejemplo de acción

# 4. Localizar por Etiqueta
elemento_por_etiqueta = driver.find_element(By.TAG_NAME, 'div')
print(elemento_por_etiqueta.text)  # Ejemplo de acción

# 5. Localizar por Selector CSS
elemento_por_css = driver.find_element(By.CSS_SELECTOR, '.elementoClase')
elemento_por_css.click()  # Ejemplo de acción

# 6. Localizar por XPath
elemento_por_xpath = driver.find_element(By.XPATH, '//div[@id="elementoID"]')
elemento_por_xpath.click()  # Ejemplo de acción

# 7. Localizar por Texto de Enlace
elemento_por_texto_enlace = driver.find_element(By.LINK_TEXT, 'Texto del Enlace')
elemento_por_texto_enlace.click()  # Ejemplo de acción

# 8. Localizar por Texto Parcial de Enlace
elemento_por_texto_parcial_enlace = driver.find_element(By.PARTIAL_LINK_TEXT, 'Texto Parcial')
elemento_por_texto_parcial_enlace.click()  # Ejemplo de acción

# Cerrar el navegador
driver.quit()

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

# Comandos de github
# Inicializando el repositorio
    git init

# Comprobamos que la rama o branch exista, se pueden crear nuevas o usar la main
    git checkout -b main

# añadimos remotamente el repositorio de github
    git remotamente add (Nombre que le queremos dar a la rama puede ser origin) (URL del repositorio)
    git remote add origin https://github.com/MangoRoulo/Calidad.git

# Comprobamos que tenemos acceso al repositorio
    git remote show origin

#Debe de salir la siguiente estructura
    * remote origin
    Fetch URL: https://github.com/MangoRoulo/Calidad.git
    Push  URL: https://github.com/MangoRoulo/Calidad.git
    HEAD branch: main
    Remote branch:
    main new (next fetch will store in remotes/origin)

# Hacemos un pull a main o master dependiendo de la rama que se haya creado
    git pull (Bombre de la rama remota) (nombre de la rama en github)
    git pull origin main